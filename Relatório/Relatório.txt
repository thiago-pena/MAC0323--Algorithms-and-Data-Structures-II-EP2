nome: Thiago Jose Benitez Pena
nUSP: 6847829


============================ Constantes ============================

Defini as seguintes constantes no arquivo "ep2.cpp".

#define PRINT_TO_PAJEK false
    -> Se for true, imprime na saída os dados de input para o Pajek.

    Assim, a seguinte linha é responsável pela impressão dos dados:
        if (PRINT_TO_PAJEK) G->exportPajek();

#define PRINT_EP2 true
    -> Imprime na saída o resultado das funções pedidas no enunciado aplicadas
        para o texto passado como parâmetro:

#define LIMITE 100
    -> Limita a saída na chamada das funções aplicadas com a constante DEBUG,
        devido ao elevado número de vértices nos grafos analisados.


============================ Compilando o programa ============================

g++ -std=c++11 -Wall -g -O0 ep2.cpp -o ep2

============================ Executando o programa ============================

Modelo:
    ./ep2 nome_arquivo k

============================ Saída do programa ===========================

Segue um exemplo dos dados imprimidos na saída do programa com algumas considerações.
Usei uma limitação de 100 linhas nos casos em que há muitas palavras.

    Número de vértices #
    Número de arestas #
    Número de componentes conexas #
    O grafo é conexo? 0/1
    Tamanho da menor componente conexa: #
    Tamanho da maior componente conexa: #
    Tamanho médio das componentes conexas: #
    Grau médio dos vértices: #

    Tamanho da componente conexa de uma palavra (casos maiores que 1)
        -> Limitado a 100 linhas
        -> Imprimi apenas maiores que 1 por serem mais interessantes.

    Distância entre palavras que estão na mesma componente conexa
        -> Limitado a 100 linhas
        -> Imprimi apenas as palavras na mesma componente conexa pois havia muitos com -1.

    Palavras que estão em um ciclo
        -> Limitado a 100 linhas

    Duplas de palavras que estão em um ciclo
        -> Limitado a 100 linhas

============================ Alterações na interface ===========================

O construtor do grafo recebe um parâmetro adicional com o nome do arquivo a ser
lido. A estrutura cria o grafo com um número fixo de palavras, pois faz um
mapeamento de string para int a partir de uma tabela de símbolos ordenada.
Então no próprio construtor, as palavras já são todas adicionadas à tabela de
símbolos e o grafo já é construído com o número necessário de vértices.


======================== Estruturas de dados utilizadas ========================

(1) Fila

    Fila simplificada, sem resize. Pois sempre vamos alocar no máximo V elementos
    na fila.

(2) GrafoInt

    Trata-se de um grafo de inteiros. É aqui que as funções do grafo são
    efetivamentesão implementadas.

(3) VetorOrd

    Foi utilizada uma das tabelas de símbolos contruída no EP1 com implementação
    em vetor ordenado.
    A escolha dessa estrutura foi feita por sua simplicidade em poder iterar pelas
    palavras, tornando o processo de inserção mais direto.
    Assim, antes de montar o grafo é montada a tabela de símbolos com as seguintes
    restrições de palavras:
    - palavras devem ter tamanho >= k
    - palavras iniciadas com um número são ignoradas

    Isso facilita a criação do Grafo, pois no momento de sua criação já é
    conhecido o número exato de vértices que serão utilizados.

(4) Grafo

    Para adaptar o grafo de inteiros para lidar com palavras, vamos utilizar as
    estruturas (2) e (3), assim, o grafo lidará realmente com inteiros com a
    estrutura (2), mas usará a tabela de símbolos para associar cada palavra
    a um inteiro.
    Basicamente as funções da interface chamam as funções da estrutura GrafoInt.

================================= CONSIDERAÇÕES ================================

*Tamanho das palavras com caracteres acentuados

    Pelo que percebi, o método length() de string conta carateres acentuados
    com um comprimento maior que o real. Então pode acontecer, por exemplo, de
    usarmos k = 3, e ser incluída uma palavra como "tá".


*Ciclos

    Foram considerados apenas ciclos simples, pois se considerássemos ciclos
    quaisquer, qualquer vértice com um vizinho retornaria verdadeiro para um
    ciclo trivial, já que trata-se de um grafo não-dirigido.


*Impressão para o Pajek
    Adicionei uma constante para ativar a função do grafo "exportPajek()", que
    imprime o grafo no formato necessário para poder visuálizá-lo no Pajek, como
    sugerido no enunciado do EP.



==================================== TESTES ===================================

Testes realizados:
    ./ep2 exemplo.txt 3
    ./ep2 lusiadas.txt 5
    ./ep2 lusiadas.txt 7
    ./ep2 loremipsum1000.txt 3
    ./ep2 domcasmurro.txt 7
    ./ep2 domcasmurro.txt 4
    ./ep2 principiaNewton.txt 10
    ./ep2 principiaNewton.txt 7

================================== RESULTADOS ==================================

Pude notar que para um mesmo texto, um menor valor do parâmetro k tende a
resultar em uma componente máxima cada vez maiores. Por exemplo, a componente
máxima passou de menos de 1% em Lusíadas com k = 7 para 19.2% em k = 5.

Porém parece a tendência é que seja formada uma grande componente conexa, muito
maior em relação às demais para k pequeno. Isso pode ser verificado também pelas
imagens obtidas do Pajek, também inclusas na pasta "Relatórios".

O menor grau dos vértices para k pequeno também indica maior facilidade de palavras
menores formarem arestas com outras palavras, resultando também no maior
tamanho médio de suas componentes conexas.

    Lusíadas
        k = 5
            Número de vértices: 8372
            Número de arestas: 5231
            Número de componentes conexas: 4391
            O grafo é conexo? 0
            Tamanho da menor componente conexa: 1
            Tamanho da maior componente conexa: 1605
            Tamanho médio das componentes conexas: 1.90663
            Grau médio dos vértices: 1.24964
        k = 7
            Número de vértices: 5738
            Número de arestas: 2050
            Número de componentes conexas: 3897
            O grafo é conexo? 0
            Tamanho da menor componente conexa: 1
            Tamanho da maior componente conexa: 20
            Tamanho médio das componentes conexas: 1.47241
            Grau médio dos vértices: 0.714535

    Dom Casmurro
        k = 4
            Número de vértices: 9313
            Número de arestas: 5846
            Número de componentes conexas: 5393
            O grafo é conexo? 0
            Tamanho da menor componente conexa: 1
            Tamanho da maior componente conexa: 1860
            Tamanho médio das componentes conexas: 1.72687
            Grau médio dos vértices: 1.25545
        k = 7
            Número de vértices: 6364
            Número de arestas: 1674
            Número de componentes conexas: 4860
            O grafo é conexo? 0
            Tamanho da menor componente conexa: 1
            Tamanho da maior componente conexa: 21
            Tamanho médio das componentes conexas: 1.30947
            Grau médio dos vértices: 0.526084

    Principia
        k = 10
            Número de vértices: 3261
            Número de arestas: 1311
            Número de componentes conexas: 2187
            O grafo é conexo? 0
            Tamanho da menor componente conexa: 1
            Tamanho da maior componente conexa: 15
            Tamanho médio das componentes conexas: 1.49108
            Grau médio dos vértices: 0.804048
        k = 7
            Número de vértices: 7748
            Número de arestas: 3934
            Número de componentes conexas: 4620
            O grafo é conexo? 0
            Tamanho da menor componente conexa: 1
            Tamanho da maior componente conexa: 20
            Tamanho médio das componentes conexas: 1.67706
            Grau médio dos vértices: 1.01549
        k = 5
            Número de vértices: 9730
            Número de arestas: 5963
            Número de componentes conexas: 5213
            O grafo é conexo? 0
            Tamanho da menor componente conexa: 1
            Tamanho da maior componente conexa: 457
            Tamanho médio das componentes conexas: 1.86649
            Grau médio dos vértices: 1.22569
